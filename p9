#! /usr/bin/python

import sys
import argparse

def parse_kwargs(kwargs):
    def parse_val(v):
        try:
            return int(v)
        except Exception as e:
            try:
                return float(v)
            except Exception as e:
                return v

    return { k: parse_val(v) for k,v in [a.split('=', 1) for a in kwargs] }

def parse_scale_kwargs(kwargs):
    kwargs = parse_kwargs(kwargs)
    if 'min' in kwargs or 'max' in kwargs:
        kwargs['limits'] = ( kwargs.pop('min', None), kwargs.pop('max', None) )
    return kwargs

def parse_command_line(argv):
    parser = argparse.ArgumentParser()
    dataset_group = parser.add_mutually_exclusive_group()
    dataset_group.add_argument('--dataset')
    dataset_group.add_argument('--input', '-i')
    parser.add_argument('--geom', '-g', action='append', nargs='+',
                        metavar=('GEOM', 'ARG=VAL'))
    parser.add_argument('--stat', '-s', action='append', nargs='+',
                        metavar=('STAT', 'ARG=VAL'))
    parser.add_argument('--scale', action='append', nargs='+',
                        metavar=('SCALE=TYPE', 'ARG=VAL'))
    parser.add_argument('--facet', '-f', nargs='+', metavar=('TYPE', 'ARG=VAL'))
    parser.add_argument('--theme', '-t', action='append', nargs='+',
                        metavar=('[NAME]', 'ARG=VAL'))
    parser.add_argument('--xlab')
    parser.add_argument('--ylab')
    parser.add_argument('--title')
    parser.add_argument('aes', nargs='*')

    args = parser.parse_args(argv)

    if args.dataset is None and args.input is None:
        args.input = '-'

    return args

def build_plot(args):
    # Don't import these unless necessary, to keep --help fast.
    import plotnine as p9
    import pandas as pd

    def get_p9(group, name):
        return getattr(p9, f'{group}_{name}')

    if args.input is not None:
        file = args.input if args.input != '-' else sys.stdin
        data = pd.read_csv(file, sep=None, engine='python')
    else:
        import plotnine.data
        data = getattr(plotnine.data, args.dataset)

    aes = p9.aes(**parse_kwargs(args.aes))

    plot = p9.ggplot(data, aes)

    for x in args.geom or []:
        plot += get_p9('geom', x[0])(**parse_kwargs(x[1:]))
    for x in args.stat or []:
        plot += get_p9('stat', x[0])(**parse_kwargs(x[1:]))

    for x in args.scale or []:
        (p1, p2) = x[0].split('=', 1)
        plot += get_p9('scale', f'{p1}_{p2}')(**parse_scale_kwargs(x[1:]))

    for x in args.theme or []:
        # We support both named themes (`-t xkcd stroke_size=5`)...
        if '=' not in x[0]:
            plot += get_p9('theme', x[0])(**parse_kwargs(x[1:]))

        # ...and fully custom themes (`-t plot_margin=0.2`)
        else:
            plot += p9.theme(**parse_kwargs(x))

    if args.facet is not None:
        plot += get_p9('facet', args.facet[0])(**parse_kwargs(args.facet[1:]))

    more_parts = [
        p9.ggtitle(args.title) if args.title is not None else None,
        p9.xlab(args.xlab) if args.xlab is not None else None,
        p9.ylab(args.ylab) if args.ylab is not None else None,

        # Default geom, only if no geom and stat provided.
        p9.geom_point() if not args.geom and not args.stat else None
    ]

    # `plot += [...]` doesn't work, but `plot = plot + [...]` does
    plot = plot + [x for x in more_parts if x is not None]

    return plot

def main():
    args = parse_command_line(sys.argv[1:])
    plot = build_plot(args)

    # In a not-yet-released plotnine, `(...).draw(show=True)` will work for
    # this.
    str(plot)

if __name__ == '__main__':
    main()
