#! /usr/bin/python

import sys
import argparse

import plotnine as p9
import pandas as pd
from datetime import date

def parse_kwargs(kwargs):
    def parse_val(v):
        try:
            return int(v)
        except Exception as e:
            try:
                return float(v)
            except Exception as e:
                return v

    return { k: parse_val(v) for k,v in [a.split('=', 1) for a in kwargs] }

def parse_scale_kwargs(kwargs):
    kwargs = parse_kwargs(kwargs)
    if 'min' in kwargs or 'max' in kwargs:
        kwargs['limits'] = ( kwargs.pop('min', None), kwargs.pop('max', None) )
    return kwargs

def get_geom(geom):
    return getattr(p9, f'geom_{geom}')

def get_stat(stat):
    return getattr(p9, f'stat_{stat}')

def get_scale(scale):
    (p1, p2) = scale.split('=', 1)
    name = f'scale_{p1}_{p2}'
    return getattr(p9, name)

def get_facet(facet):
    return getattr(p9, f'facet_{facet}')

def get_theme(theme_args):
    if '=' in theme_args[0]:
        return p9.theme(**parse_kwargs(theme_args))
    else:
        theme_func = getattr(p9, f'theme_{theme_args[0]}')
        return theme_func(**parse_kwargs(theme_args[1:]))

def parse_command_line(argv):
    parser = argparse.ArgumentParser()
    dataset_group = parser.add_mutually_exclusive_group()
    dataset_group.add_argument('--dataset')
    dataset_group.add_argument('--input', '-i')
    parser.add_argument('--geom', '-g', action='append', nargs='+',
                        metavar=('GEOM', 'ARG=VAL'))
    parser.add_argument('--stat', '-s', action='append', nargs='+',
                        metavar=('STAT', 'ARG=VAL'))
    parser.add_argument('--scale', action='append', nargs='+',
                        metavar=('SCALE=TYPE', 'ARG=VAL'))
    parser.add_argument('--facet', '-f', nargs='+', metavar=('TYPE', 'ARG=VAL'))
    parser.add_argument('--theme', '-t', action='append', nargs='+',
                        metavar=('[NAME]', 'ARG=VAL'))
    parser.add_argument('--xlab')
    parser.add_argument('--ylab')
    parser.add_argument('--title')
    parser.add_argument('aes', nargs='*')

    args = parser.parse_args(argv)

    if args.dataset is None and args.input is None:
        args.input = '-'

    args.aes = p9.aes(**parse_kwargs(args.aes))
    args.geom = [ get_geom(g[0])(**parse_kwargs(g[1:]))
                  for g in args.geom or [] ]
    args.stat = [ get_stat(s[0])(**parse_kwargs(s[1:]))
                  for s in args.stat or [] ]
    args.scale = [ get_scale(s[0])(**parse_scale_kwargs(s[1:]))
                   for s in args.scale or [] ]
    args.theme = [ get_theme(t) for t in args.theme or [] ]

    if args.facet:
        args.facet = get_facet(args.facet[0])(**parse_kwargs(args.facet[1:]))

    return args

def main():
    args = parse_command_line(sys.argv[1:])

    if args.input:
        file = args.input if args.input != '-' else sys.stdin
        data = pd.read_csv(file, sep=None, engine='python')
    else:
        import plotnine.data
        data = getattr(plotnine.data, args.dataset)

    parts = [
        args.geom or None,
        args.stat or None,
        args.scale or None,
        args.facet,
        p9.ggtitle(args.title) if args.title is not None else None,
        p9.xlab(args.xlab) if args.xlab is not None else None,
        p9.ylab(args.ylab) if args.ylab is not None else None,
        args.theme if args.theme is not None else None,

        # Default geom, only if no geom and stat provided.
        p9.geom_point() if not args.geom and not args.stat else None
    ]

    plot = p9.ggplot(data, args.aes)

    for p in parts:
        if p is not None:
            # plot += p doesn't work if p is a list
            plot = plot + p

    # In a not-yet-released plotnine, `(...).draw(show=True)` will work for
    # this.
    str(plot)

if __name__ == '__main__':
    main()
